 
name: 'build-on-host'
description: 'Build the repository on the runner host system'
inputs:
  os:
    required: true
    description: 'The target operating system to build for'
  build-type:
    required: false
    default: 'Debug'
    description: 'The CMake build type (CMAKE_BUILD_TYPE) to run.'
  install:
    required: false
    default: 'false'
    description: 'Invoke CMake install for the project'
  test:
    required: false
    default: 'true'
    description: 'Invoke CMake CTest for the project'
  package:
    required: false
    default: 'false'
    description: 'Invoke CMake CPack for the project'
  publish-artifacts:
    required: false
    default: 'false'
    description: 'Publish build artifacts'
  preset-name:
    required: false
    default: 'dev'
    description: 'The name of the preset to use for all CMake operations (configure, build, test, install, package)'

runs:
  using: 'composite'
  steps:
  - name: Configure vcpkg to use Github Actions Cache 
    uses: actions/github-script@v7
    with:
      script: |
        core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
        core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
        core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

  - name: Install Linux build dependencies
    if: ${{ inputs.os == 'linux' }}
    run: |
      export DEBIAN_FRONTEND=noninteractive
      sudo -E apt-get update
      sudo -E apt-get upgrade
      # Install core build dependencies
      sudo -E apt-get install -qq --no-install-recommends autoconf automake autopoint build-essential ca-certificates cmake curl git gnupg libltdl-dev libmount-dev libtool linux-libc-dev ninja-build pkg-config python3-jinja2 tar unzip zip 
      # Install LLVM 18 toolchain
      sudo -E apt-get install -qq --no-install-recommends libllvm-18-ocaml-dev libllvm18 llvm-18 llvm-18-dev llvm-18-doc llvm-18-examples llvm-18-runtime clang-18 clang-tools-18 clang-18-doc libclang-common-18-dev libclang-18-dev libclang1-18 clang-format-18 python3-clang-18 clangd-18 clang-tidy-18 libclang-rt-18-dev libpolly-18-dev  libfuzzer-18-dev lldb-18 libc++-18-dev libc++abi-18-dev libomp-18-dev libclc-18-dev libunwind-18-dev libmlir-18-dev mlir-18-tools libbolt-18-dev bolt-18 flang-18 libclang-rt-18-dev-wasm32 libclang-rt-18-dev-wasm64 libc++-18-dev-wasm32 libc++abi-18-dev-wasm32 libclang-rt-18-dev-wasm32 libclang-rt-18-dev-wasm64 libllvmlibc-18-dev
      # Install hostapd dependencies
      sudo -E apt-get install -qq --no-install-recommends libnl-3-200-dbg libnl-3-dev libssl-dev libnl-genl-3-dev libdbus-c++-dev libnl-route-3-dev
    shell: bash

  - name: CMake Configure
    if: ${{ ! inputs.arch }}
    run: cmake --preset ${{ inputs.preset-name }}-${{ inputs.os }} --fresh -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Configure Cross-Compile ${{ inputs.arch }}
    if: ${{ inputs.arch }}
    run: cmake --preset ${{ inputs.preset-name }}-${{ inputs.os }} --fresh -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DNETREMOTE_EXCLUDE_TESTS=TRUE -A ${{ inputs.arch }}
    shell: pwsh

  - name: CMake Build
    run: cmake --build --preset build-${{ inputs.preset-name }}-${{ inputs.os }} --config ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Test (ctest)
    if: ${{ inputs.test == 'true' && ! inputs.arch }}
    run: ctest --preset test-${{ inputs.preset-name }}-${{ inputs.os }} -C ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Install
    if: inputs.install == 'true'
    run: cmake --build --preset build-${{ inputs.preset-name }}-${{ inputs.os }} --target install --config ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Package (cpack)
    if: inputs.package == 'true'
    run: cpack --preset packaging-${{ inputs.preset-name }}-${{ inputs.os }} -C ${{ inputs.build-type }}
    shell: pwsh

  - name: Publish Artifacts
    if: inputs.publish-artifacts == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: release-package-${{ runner.os }}-${{ inputs.build-type }}-${{ inputs.arch != '' && inputs.arch || runner.arch }}
      path: |
        ${{ github.workspace }}/out/package/${{ inputs.preset-name }}-${{ inputs.os }}/*.tar.*
        ${{ github.workspace }}/out/package/${{ inputs.preset-name }}-${{ inputs.os }}/*.zip
