 
name: 'build-on-host'
description: 'Build the repository on the runner host system'
inputs:
  build-type:
    required: false
    default: 'Debug'
    description: 'The CMake build type (CMAKE_BUILD_TYPE) to run.'
  install:
    required: false
    default: 'false'
    description: 'Invoke CMake install for the project'
  test:
    required: false
    default: 'true'
    description: 'Invoke CMake CTest for the project'
  package:
    required: false
    default: 'false'
    description: 'Invoke CMake CPack for the project'
  publish-artifacts:
    required: false
    default: 'false'
    description: 'Publish build artifacts'
  preset-name:
    required: false
    default: 'dev-windows'
    description: 'The name of the preset to use for all CMake operations (configure, build, test, install, package)'
  use-vcpkg-github-actions-cache:
    required: false
    default: 'true'
    description: 'Use the Github Actions cache for vcpkg dependencies (Windows only).'

runs:
  using: 'composite'
  steps:
  - name: Configure vcpkg to use Github Actions Cache 
    if: ${{ inputs.use-vcpkg-github-actions-cache == 'true' }}
    uses: actions/github-script@v7
    with:
      script: |
        core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
        core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
        core.exportVariable('VCPKG_DEFAULT_BINARY_CACHE', 'C:/vcpkg/archive');
        core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

  - name: Install vcpkg dependencies with Github Actions Cache
    if: ${{ inputs.use-vcpkg-github-actions-cache == 'true' }}
    run: |
      echo "VCPKG_DEFAULT_BINARY_CACHE=${VCPKG_DEFAULT_BINARY_CACHE}" >> "${GITHUB_ENV}"
      echo "VCPKG_BINARY_SOURCES=${VCPKG_BINARY_SOURCES}" >> "${GITHUB_ENV}"
      New-Item -Path ${env:VCPKG_DEFAULT_BINARY_CACHE} -ItemType Directory -Force
    shell: pwsh
  
  - name: Install Linux build dependencies
    if: ${{ contains(inputs.preset-name, 'linux') }}
    run: |
      export DEBIAN_FRONTEND=noninteractive
      sudo apt-get update -y
      sudo apt-get upgrade -y
      sudo apt-get install -y --no-install-recommends autoconf automake autopoint build-essential ca-certificates cmake curl git gnupg libltdl-dev libmount-dev libtool linux-libc-dev ninja-build pkg-config python3-jinja2 tar unzip zip libnl-3-dev libssl-dev libnl-genl-3-dev libnl-3-dev libdbus-c++-dev libnl-route-3-dev flex bison dwarves libelf-dev bc iw debconf-utils policycoreutils-python-utils python-is-python3 
      sudo apt-get install -y libllvm-17-ocaml-dev libllvm17 llvm-17 llvm-17-dev llvm-17-doc llvm-17-examples llvm-17-runtime clang-17 clang-tools-17 clang-17-doc libclang-common-17-dev libclang-17-dev libclang1-17 clang-format-17 python3-clang-17 clangd-17 clang-tidy-17 libclang-rt-17-dev libpolly-17-dev libfuzzer-17-dev lldb-17 lld-17 libc++-17-dev libc++abi-17-dev libomp-17-dev libclc-17-dev libunwind-17-dev libmlir-17-dev mlir-17-tools libbolt-17-dev bolt-17 flang-17 libclang-rt-17-dev-wasm32 libclang-rt-17-dev-wasm64 libc++-17-dev-wasm32 libc++abi-17-dev-wasm32 libclang-rt-17-dev-wasm32 libclang-rt-17-dev-wasm64
    shell: bash

  - name: CMake Configure
    if: ${{ ! inputs.arch }}
    run: cmake --preset ${{ inputs.preset-name }} --fresh -DCMAKE_BUILD_TYPE=${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Configure Cross-Compile ${{ inputs.arch }}
    if: ${{ inputs.arch }}
    run: cmake --preset ${{ inputs.preset-name }} --fresh -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DNETREMOTE_EXCLUDE_TESTS=TRUE -A ${{ inputs.arch }}
    shell: pwsh

  - name: CMake Build
    run: cmake --build --preset build-${{ inputs.preset-name }} --config ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Test (ctest)
    if: ${{ inputs.test == 'true' && ! inputs.arch }}
    run: ctest --preset non-root -C ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Install
    if: inputs.install == 'true'
    run: cmake --build --preset build-${{ inputs.preset-name }} --target install --config ${{ inputs.build-type }}
    shell: pwsh

  - name: CMake Package (cpack)
    if: inputs.package == 'true'
    run: cpack --preset packaging-${{ inputs.preset-name }} -C ${{ inputs.build-type }}
    shell: pwsh

  - name: Publish Artifacts
    if: inputs.publish-artifacts == 'true'
    uses: actions/upload-artifact@v4
    with:
      name: release-package-${{ runner.os }}-${{ inputs.build-type }}-${{ inputs.arch != '' && inputs.arch || runner.arch }}
      path: |
        ${{ github.workspace }}/out/package/${{ inputs.preset-name }}/*.tar.*
        ${{ github.workspace }}/out/package/${{ inputs.preset-name }}/*.zip
